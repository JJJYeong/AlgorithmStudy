/*
 * # 문제 주소
 * https://www.acmicpc.net/problem/4948
 * 
 * # 제한
 * 시간 제한 : 1초, 메모리 제한 : 256 MB
 * 
 * # 문제
 * 베르트랑 공준은 임의의 자연수 n에 대하여, n보다 크고, 2n보다 작거나 같은 소수는 적어도 하나 존재한다는 내용을 담고 있다.
 * 이 명제는 조제프 베르트랑이 1845년에 추측했고, 파프누티 체비쇼프가 1850년에 증명했다.
 * 예를 들어, 10보다 크고, 20보다 작거나 같은 소수는 4개가 있다. (11, 13, 17, 19) 또, 14보다 크고, 28보다 작거나 같은 소수는 3개가 있다. (17,19, 23)
 * 자연수 n이 주어졌을 때, n보다 크고, 2n보다 작거나 같은 소수의 개수를 구하는 프로그램을 작성하시오.
 * 
 * # 입력
 * 입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 케이스는 n을 포함하는 한 줄로 이루어져 있다.
 * 입력의 마지막에는 0이 주어진다. 1 ≤ n ≤ 123,456
 * 
 * # 출력
 * 각 테스트 케이스에 대해서, n보다 크고, 2n보다 작거나 같은 소수의 개수를 출력한다.  
 * 
 */

/*
 * # 풀이
 * n초과 2n이하의 수들을 소수를 판별하는 연산을 해서 소수면 카운트해서 2n까지 판별이 끝나면 총 개수를 출력했다.
 * 하지만 정직하게 2부터 i까지의 수의 나머지를 구하면서 소수를 판별하면 시간이 오래 걸리기 때문에 i의 제곱근 만큼만 반복하는 알고리즘을 썼다.
 * i의 제곱근만큼만 반복해도 소수인지 판별이 되는 이유는 제곱근을 넘어가는 수 부터는 앞전에 구했던 곱해서 i가 되는 수들이 순서만 바뀌어서 똑같이 나오기 때문이다.
 * 예를 들어 i=16라면
 * 1*16
 * 2*8
 * 4*4
 * 8*2
 * 16*1
 * 위와 같이 16의 제곱근인 4를 기점으로 앞전에 나왔던 수들이 순서만 바뀌어서 나온다. 
 * 그래서 제곱근을 초과하는 수에 대해 소수를 판별하는 연산을 하는 것은 생략해도 결과에 영향이 없다.
 * 
 * https://notepad96.tistory.com/entry/C-%EC%86%8C%EC%88%98-%ED%8C%90%EB%B3%84%ED%95%98%EA%B8%B0
 * 예전에 참고했던 글인데 언어 상관없이 개념적으로 참고하기 좋은 글이다.
 * 
 * # 결과
 * 시간 : 696 ms, 메모리 : 14660 KB
 * 
 */

import java.io.*;

public class Main {
	
	// 입력된 수가 소수인지 판별하는 함수
	public static boolean isPrimeNum(int num)
	{
		// 2보다 작으면 1인데 1은 소수가 아니니까 false 리턴
		if (2 > num)
			return false;
		
		// num의 제곱근을 구한다.
		int a = (int) Math.sqrt(num);
		for (int i = 2; a >= i; i++)
		{
			// 2부터 제곱근만큼만 반복하면서 나눠 떨어지는 수가 있으면 소수가 아니다.
			if (0 == num % i)
				return false;
		}
		
		// 위 반복문을 통과하면 소수
		return true;
	}

	public static void main(String[] args) throws IOException {
		
		// 입력 시간을 줄이기 위해 버퍼 입력 사용
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		
		int n, n2, ans;
		while (true)
		{
			ans = 0; // 여러 테스트케이스를 돌리니까 시작마다 초기화 해줌
			n = Integer.parseInt(bf.readLine());
			if (0 == n)
				break;
			
			n2 = n * 2; // n * 2 >= i 라고 써도 되지만 반복 조건을 확인할 때마다 연산하면 그만큼 느려지기 때문에 계산해놓고 시작
			for (int i = n + 1; n2 >= i; i++)
			{
				if (isPrimeNum(i))
					ans++;
			}
			
			System.out.println(ans);
		}
		
	}
	
}
