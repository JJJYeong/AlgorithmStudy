/*
 * # 문제 주소
 * https://www.acmicpc.net/problem/4673
 * 
 * # 문제
 * 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다. 
 * 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자. 예를 들어, d(75) = 75+7+5 = 87이다.
 * 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다. 
 * 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다. 
 * 이런식으로 다음과 같은 수열을 만들 수 있다.
 * 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
 * 
 * n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다. 
 * 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다. 
 * 생성자가 없는 숫자를 셀프 넘버라고 한다. 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97
 * 
 * 10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.
 * 
 * # 제한
 * 시간 제한 : 1초, 메모리 제한 : 256 MB
 * 
 * # 입력
 * 입력은 없다.
 * 
 * # 출력
 * 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.
 * 
 */

/*
 * # 풀이
 * 10000개의 크기를 가진 boolean 배열을 만들어 각 인덱스에 해당 숫자가 만들어졌는지 아닌지 표시하면 될 것이라 생각하고 코드를 짰다.
 * d(n)으로 만들어진 숫자의 인덱스만 true로 바꾸면 만들어지지 않은 숫자의 인덱스는 false로 남아 있을 것이다.
 * 모든 숫자에 대하여 d(n) 연산이 끝나고 난 뒤 배열에서 false인 인덱스 넘버만 출력하면 문제의 답을 구할 수 있다.
 * 
 * 문제의 조건에서 10000보다 작거나 같은 숫자 중 셀프넘버를 구하라고 했기 때문에 10000번째 인덱스에 접근할 수 있게 배열의 크기는 10001개로 선언했다. 
 * 
 */

import java.io.*;

public class Main {
	
	static final int MAX = 10001; // 10000번째 인덱스에 접근할 수 있도록 1개 크게 선언

	public static void main(String[] args) throws IOException {
		
		// 입출력 시간을 줄이기 위해 버퍼 입출력 사용
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		boolean arr[] = new boolean[MAX]; // d(n)의 결과로 i번째 숫자가 만들어졌는지 아닌지 표시할 배열
		for (int i = 1; MAX > i; i++)
		{
			int num = i; // 현재 계산할 숫자
			int sum = i;
			while (0 < num)
			{
				int last = num % 10; // 현재 숫자의 마지막 자리
				sum += last; // 합계에 마지막 자리를 더해주고
				num /= 10; // 10으로 나눠 다음 마지막 자리를 구할 수 있도록 한다.
			}
			
			// 위에서 구한 합계의 인덱스를 true로 바꿔준다.
			// 그런데 10000번째 숫자까지 계산하다보면 10000을 넘어가는 숫자가 나오게 된다. 
			// 배열의 크기는 10001개로 선언했기 때문에 10000을 넘어가는 숫자 인덱스에 접근하려 하면 에러가 나니까 조건문으로 범위를 제한해준다.
			if (MAX > sum) 
				arr[sum] = true;
		}
		
		// 1부터 시작해서 false인 번호 출력
		for (int i = 1; MAX > i; i++)
		{
			if (!arr[i])
				bw.write(Integer.toString(i) + "\n");
		}
		
		bw.close();
		
	}
	
}
